import os, sys, subprocess, signal
import logging
import optparse

from base64 import b64encode, b64decode
import repostaticanalysis
import json
import pickle

def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(b64decode(dct['_python_object'].encode('utf-8')))
    return dct

def isValidOpts(opts):
    """
    Check if the required options are sane to be accepted
        - Check if the provided files exist
        - Check if two sections (additional data) exist
        - Read all target libraries to be debloated from the provided list
    :param opts:
    :return:
    """
    if not options.repopath or not options.cvepath or not options.outputpath:
        parser.error("All options -r, -o and -c should be provided.")
        return False

    return True


def setLogPath(logPath):
    """
    Set the property of the logger: path, config, and format
    :param logPath:
    :return:
    """
    if os.path.exists(logPath):
        os.remove(logPath)

    rootLogger = logging.getLogger("coverage")
    if options.debug:
        logging.basicConfig(filename=logPath, level=logging.DEBUG)
        rootLogger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig(filename=logPath, level=logging.INFO)
        rootLogger.setLevel(logging.INFO)

#    ch = logging.StreamHandler(sys.stdout)
    consoleHandler = logging.StreamHandler()
    rootLogger.addHandler(consoleHandler)
    return rootLogger
#    rootLogger.addHandler(ch)

if __name__ == '__main__':
    """
    Main function for finding physical memory usage of process
    """
    usage = "Usage: %prog -e <Target executable path> -p <PID of process to retrieve information about>"

    parser = optparse.OptionParser(usage=usage, version="1")

    parser.add_option("-r", "--repopath", dest="repopath", default=None, nargs=1,
                      help="Perf output path")

    parser.add_option("-c", "--cvepath", dest="cvepath", default=None, nargs=1,
                      help="Path to file containing dump of CVE->CommitID->File->Line Numbers")

    parser.add_option("-o", "--outputpath", dest="outputpath", default=None, nargs=1,
                      help="Path to output file")

    parser.add_option("-d", "--debug", dest="debug", action="store_true", default=False,
                      help="Debug enabled/disabled")

    (options, args) = parser.parse_args()
    if isValidOpts(options):
        rootLogger = setLogPath("cvetofunctionmapper.log")
        repoObj = repostaticanalysis.RepoStaticAnalysis(options.repopath, rootLogger)
        jsonFile = open(options.cvepath, 'r')
        jsonData = jsonFile.read()
        jsonDump = json.loads(jsonData, object_hook=as_python_object)

        outputFile = open(options.outputpath, 'w')
        for cveId, commitDict in jsonDump.items():
            for commitId, fileDict in commitDict.items():
                for fileName, lineNumberList in fileDict.items():
                    for lineNumber in lineNumberList:
                        rootLogger.info("Extracting function for CVE: %s, commitId: %s, fileName: %s lineNumber: %d", cveId, commitId, fileName, lineNumber)
                        functionName = repoObj.getFunction(fileName, lineNumber, commitId)
                        if ( functionName != "" ):
                            outputFile.write(cveId + "," + commitId + "," + fileName + "," + str(lineNumber) + "," + functionName + "\n")
                            outputFile.flush()
                        rootLogger.info("CVE: %s FileName: %s FunctionName: %s", cveId, fileName, functionName)
        outputFile.close()
