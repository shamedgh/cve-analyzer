import os, sys, subprocess, signal
import logging
import optparse
import ast

from random import seed
from random import randint

sys.path.insert(0, './python-utils')

import util
import graph
import callfunctiongraph

def isValidOpts(opts):
    """
    Check if the required options are sane to be accepted
        - Check if the provided files exist
        - Check if two sections (additional data) exist
        - Read all target libraries to be debloated from the provided list
    :param opts:
    :return:
    """
    if not options.origresults or not options.fgresults or not options.restresults or not options.outputfile:
        parser.error("All options --origresults, --fgresults, --restresults and --outputfile should be provided.")
        return False

    return True

def getNContainers(containerSet, n):
    importantImages = ['nginx', 'httpd', 'mysql', 'mongodb', 'redis', 'couchdb']
    resultSet = set()
    tempSet = set()
    for importantItem in importantImages:
        if ( importantItem in containerSet ):
            tempSet.add(importantItem)
    if ( len(tempSet) > n ):
        tempList = list(tempSet)
        seed(1)
        while ( len(resultSet) < n ):
            resultSet.add(tempList[randint(0,n)])
    else:
        containerList = list(containerSet)
        seed(1)
        while ( len(resultSet) < n ):
            resultSet.add(containerList[randint(0,n)])
    return resultSet
            
def getNCves(cveSet, n):
    if ( len(cveSet) <= n ):
        return cveSet
    resultSet = set()
    tempSet = set()
    cveList = list(cveSet)
    seed(1)
    while ( len(resultSet) < n ):
#        print ("len(cveSet): " + str(len(cveSet)) + " n: " + str(n))
        resultSet.add(cveList[randint(0,n)])
    return resultSet

def setLogPath(logPath):
    """
    Set the property of the logger: path, config, and format
    :param logPath:
    :return:
    """
    if os.path.exists(logPath):
        os.remove(logPath)

    rootLogger = logging.getLogger("coverage")
    if options.debug:
        logging.basicConfig(filename=logPath, level=logging.DEBUG)
        rootLogger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig(filename=logPath, level=logging.INFO)
        rootLogger.setLevel(logging.INFO)

#    ch = logging.StreamHandler(sys.stdout)
    consoleHandler = logging.StreamHandler()
    rootLogger.addHandler(consoleHandler)
    return rootLogger
#    rootLogger.addHandler(ch)

if __name__ == '__main__':
    """
    Find system calls for function
    """
    usage = "Usage: %prog -c <Callgraph> -s <Separator in callgraph file llvm=-> glibc=: > -f <Function name>"

    parser = optparse.OptionParser(usage=usage, version="1")

    parser.add_option("", "--origresults", dest="origresults", default=None, nargs=1,
                      help="Path for CVE results for original filters")

    parser.add_option("", "--fgresults", dest="fgresults", default=None, nargs=1,
                      help="Path for CVE results for finegrained filters")

    parser.add_option("", "--restresults", dest="restresults", default=None, nargs=1,
                      help="Path for CVE results for restrictive filters")

    parser.add_option("", "--outputfile", dest="outputfile", default=None, nargs=1,
                      help="Path for aggregated CVE results")

    parser.add_option("-d", "--debug", dest="debug", action="store_true", default=False,
                      help="Debug enabled/disabled")

    (options, args) = parser.parse_args()
    if isValidOpts(options):
        rootLogger = setLogPath("aggregatecveresults.log")

        origFile = open(options.origresults, 'r')
        fgFile = open(options.fgresults, 'r')
        restFile = open(options.restresults, 'r')
        outputFile = open(options.outputfile, 'w')

        syscallToCveDict = dict()
        syscallToCveCountDict = dict()
        syscallToTypeDict = dict()
        syscallToRestCountDict = dict()
        syscallToFgCountDict = dict()
        syscallToOrigCountDict = dict()
        syscallToImageDict = dict()

        restLine = restFile.readline()
        while ( restLine ):
            splittedLine = restLine.split(";")
            if ( len(splittedLine) == 7 ):
                filteredByDefault = True if splittedLine[4] == "True" else False
                if ( not filteredByDefault ):
                    syscallStr = splittedLine[0]
                    syscallToCveCountDict[syscallStr] = int(splittedLine[1])
                    syscallToCveDict[syscallStr] = splittedLine[2]
                    syscallToTypeDict[syscallStr] = splittedLine[3]
                    syscallToRestCountDict[syscallStr] = int(splittedLine[5])
                    syscallToImageDict[syscallStr] = splittedLine[6]             
            else:
                rootLogger.error("Line doesn't have 6 elements, this shouldn't happen: %s", restLine)
            restLine = restFile.readline()

        restFile.close()

        fgLine = fgFile.readline()
        while ( fgLine ):
            splittedLine = fgLine.split(";")
            if ( len(splittedLine) == 7 ):
                filteredByDefault = True if splittedLine[4] == "True" else False
                if ( not filteredByDefault ):
                    syscallStr = splittedLine[0]
                    syscallToFgCountDict[syscallStr] = int(splittedLine[5])
            else:
                rootLogger.error("Line doesn't have 6 elements, this shouldn't happen: %s", fgLine)
            fgLine = fgFile.readline()

        fgFile.close()

        origLine = origFile.readline()
        while ( origLine ):
            splittedLine = origLine.split(";")
            if ( len(splittedLine) == 7 ):
                filteredByDefault = True if splittedLine[4] == "True" else False
                if ( not filteredByDefault ):
                    syscallStr = splittedLine[0]
                    syscallToOrigCountDict[syscallStr] = int(splittedLine[5])
            else:
                rootLogger.error("Line doesn't have 6 elements, this shouldn't happen: %s", origLine)
            origLine = origFile.readline()

        origFile.close()

        for syscallStr, cveList in syscallToCveDict.items():
            outputFile.write(syscallStr + ";" + str(syscallToCveCountDict[syscallStr]) + ";" + syscallToCveDict[syscallStr] + ";" + syscallToTypeDict[syscallStr] + ";" + "False" +";" + str(syscallToOrigCountDict.get(syscallStr, 0)) + ";" + str(syscallToFgCountDict.get(syscallStr, 0)) + ";" + str(syscallToRestCountDict[syscallStr]) + ";" + syscallToImageDict[syscallStr])
            outputFile.flush()
        outputFile.close()
